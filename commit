#!/usr/bin/env python3

import yaml
from pyroute2 import NDB, IPRoute
import argparse
import sys

parser = argparse.ArgumentParser(description="Configure ONL device interfaces and routing")
parser.add_argument("--config", type=str, help="Configuration file to load", default="config.yml")
args = parser.parse_args()

ndb = NDB()

with open(args.config, "r") as f:
    config = yaml.load(f, Loader=yaml.Loader)

# interfaces that shouldn't be touched, ever
do_not_touch = ["lo", "dummy0", "sit0"]
# check that none of those are part of the config
for interface in config["interfaces"]:
    found_bad = False
    if interface["name"] in do_not_touch:
        found_bad = True
        print(f"Invalid interface {interface['name']} in configuration file")
    if found_bad:
        sys.exit(1)
    

# add the mgmt IP address configuration to either the VLANs or the physical interfaces
if "mgmt_ip" in config:
    if "vlan" in config["mgmt_ip"]:
        found = False
        for vlan in config["vlans"]:
            if vlan["id"] == config["mgmt_ip"]["vlan"]:
                found = True
                if "ipv4" in vlan:
                    if config["mgmt_ip"]["ipv4"] not in vlan["ipv4"]:
                        vlan["ipv4"].append(config["mgmt_ip"]["ipv4"])
                else:
                    vlan["ipv4"] = [config["mgmt_ip"]["ipv4"]]
        if not found:
            config["vlans"].append(
                {
                    "name": "netmgmt",
                    "id": config["mgmt_ip"]["vlan"],
                    "ipv4": [config["mgmt_ip"]["ipv4"]],
                }
            )
    else:
        found = False
        for interface in config["interfaces"]:
            if interface["name"] == config["mgmt_ip"]["interface"]:
                found = True
                if "l3" in interface:
                    if "ipv4" in interface:
                        if config["mgmt_ip"]["ipv4"] not in interface["l3"]["ipv4"]:
                            interface["l3"]["ipv4"].append(config["mgmt_ip"]["ipv4"])
                        else:
                            interface["l3"]["ipv4"] = [config["mgmt_ip"]["ipv4"]]
                else:
                    interface["l3"] = {"ipv4": [config["mgmt_ip"]["ipv4"]]}
        if not found:
            config["interfaces"].append(
                {
                    "name": config["mgmt_ip"]["interface"],
                    "enabled": True,
                    "l3": {
                        "ipv4": [config["mgmt_ip"]["ipv4"]],
                    },
                }
            )

# cache some information that will be useful later
# fetch information on all VLANs and IP addresses on interfaces,
# store interfaces have IP or VLANs into sets
interfaces_with_vlans = set(map(lambda x: x.ifname, ndb.vlans.summary()))
interfaces_with_ips = set(map(lambda x: x.ifname, ndb.addresses.summary()))
# create a lookup table for interface admin states
admin_state = {x.ifname: x.state for x in ndb.interfaces.dump()}

# configure LACP bundles
# parse the interface configuration for such bundles,
# assembling a data structure to describe them:
# lacp_config = [
#   {"name": "bond1", "members": ["swp1", "swp2"]}
# ]
lacp_config = {}
for interface in config["interfaces"]:
    if "lacp" in interface:
        if interface["lacp"] in lacp_config:
            lacp_config[interface["lacp"]].append(interface["name"])
        else:
            lacp_config[interface["lacp"]] = [interface["name"]]
lacp_config = [{"name": name, "members": lacp_config[name]} for name in lacp_config.keys()]

# retrieve all existing LACP bundles
current_bundles = set(map(
    lambda x: x["ifname"],
    ndb.interfaces
        .dump()
        .filter(lambda x: x.kind == "bond")
        .select("ifname")
))

# get the declared bundles
declared_bundles = set(map(
    lambda x: x["name"], 
    lacp_config
))

# remove all the bundles that shouldn't exist anymore
for bundle in (current_bundles - declared_bundles):
    (ndb
        .interfaces[bundle]
        .remove()
        .commit()
    )
    print(f"Removed existing LACP bundle {bundle} that is no longer present in configuration")

# create all the new bundles that don't exist yet
for bundle in (declared_bundles - current_bundles):
    (ndb
        .interfaces
        .create(
            ifname=bundle,
            kind="bond",
            bond_mode=4, # LACP
            bond_ad_lacp_rate=1, # LACP rate fast
        )
        .commit()
    )
    print(f"Created new LACP bundle {bundle}")

# now process all the member interfaces
lacp_members = set()
for bundle in lacp_config:
    # grab the index for easy reference
    master_idx = ndb.interfaces[bundle["name"]]["index"]

    # remember all bundle members so they can be skipped in  
    # future layer 2 or 3 interface configurations
    lacp_members.update(bundle["members"])

    # grab all interfaces currently part of this bundle
    current_members = set(map(
        lambda x: x["ifname"], 
        ndb.interfaces
            .dump()
            .filter(lambda x: x.master == master_idx)
            .select("ifname")
        ))

    # turn the names of members supposed to be in the budle into a set
    declared_members = set(bundle["members"])

    # remove all the members that shouldn't be in the bundle anymore
    for member in (current_members - declared_members):
        (ndb
            .interfaces[bundle["name"]]
            .del_port(member)
            .commit()
        )
        print(f"Deleted member {member} from bundle {bundle['name']}")

    # add all the members that should be in the bundle but aren't yet
    members_to_add = declared_members - current_members
    if len(members_to_add):
        # however, doing so requires the bundle itself to have no master interface set
        # this will briefly interrupt traffic as it'll have to be reset
        upstream_master = ndb.interfaces[bundle["name"]]["master"]
        if upstream_master:
            (ndb
                .interfaces[upstream_master]
                .del_port(bundle["name"])
                .commit()
            )
            print(f"Temporarily removed bundle {bundle['name']} from its upstream")
        # now add all the members
        for member in members_to_add:
            # for this, the new member has to be down
            previous_state = admin_state[member]
            if previous_state != "down":
                (ndb
                    .interfaces[member]
                    .set("state", "down")
                    .commit()
                )
            # add it to the bundle
            (ndb
                .interfaces[bundle["name"]]
                .add_port(member)
                .commit()
            )
            # restore the previous state if it wasn't down
            if previous_state != "down":
                (ndb
                    .interfaces[member]
                    .set("state", previous_state)
                    .commit()
                )
            print(f"Added member {member} to bundle {bundle['name']}")
        # and restore the upstream master if needed
        if upstream_master:
            (ndb
                .interfaces[upstream_master]
                .add_port(bundle["name"])
                .commit()
            )
            print(f"Restored upstream for bundle {bundle['name']}")

# create all the virtual switches
# include a default one in case none are defined
virtual_switches = set(["default-switch"])
for interface in config["interfaces"]:
    if "virtual_switch" in interface:
        virtual_switches.add(interface["virtual_switch"])

for virtual_switch in virtual_switches:        
    if virtual_switch not in ndb.interfaces:
        (ndb
            .interfaces
            .create(
                ifname=virtual_switch,
                kind="bridge",
                state="up",
                br_vlan_filtering=1,
                br_vlan_default_pvid=1,
                br_vlan_stats_enabled=1,
            )
            .commit()
        )
        print(f"Created VLAN capable switch {virtual_switch}")
    else:
        # if the bridge already exists, ensure the interface is up
        if admin_state[virtual_switch] != "up":
            (ndb
                .interfaces[virtual_switch]
                .set("state", "up")
                .commit()
            )
            print(f"Enabled virtual switch {virtual_switch}")

# helper function to retrieve NTLM attributes of a certain kind
# from the large list of attributes an interface might have
def _get_attribute(search_key, attrs):
    result = []
    for (key, value) in attrs:
        if search_key == key:
            result.append(value)
    return result

# function to retrieve the current VLANs on an interface
# this uses the IPRoute interface as ndb.vlans.summary() doesn't
# include VLAN flags, which is how tagged vs untagged is set
def get_vlans(ifname):
    vlans = []
    for interface in ipr.get_vlans():
        candidate_name = _get_attribute("IFLA_IFNAME", interface["attrs"])[0]
        if candidate_name == ifname:
            spec = _get_attribute("IFLA_AF_SPEC", interface["attrs"])[0]
            vlans = _get_attribute("IFLA_BRIDGE_VLAN_INFO", spec["attrs"])
    return list(map(lambda x: {"flags": x["flags"], "vid": x["vid"]}, vlans))

# parse the VLANs into a data structure where VIDs can be looked up by name
vlans = {x["name"]: x["id"] for x in config["vlans"]}

# function to set layer 3 addresses on an interface
def set_addresses(ifname, declared_addresses):
    current_addresses = filter(lambda x: x["ifname"] == ifname, ndb.addresses.summary())
    current_addresses = set(map(lambda x: f"{x['address']}/{x['prefixlen']}", current_addresses))

    # remove configured IPs that should no longer be there
    for address in (current_addresses - declared_addresses):
        # skip ipv6 link local addresses
        if address.startswith("fe80::"):
            continue
        (ndb.interfaces[ifname]
            .del_ip(address)
            .commit()
        )
        print(f"Removed address {address} from interface {ifname}")
    # add any IPs that are declared but not present
    for address in (declared_addresses - current_addresses):
        (ndb.interfaces[ifname]
            .add_ip(address)
            .commit()
        )
        print(f"Added address {address} to interface {ifname}")

def set_vlans(ifname, declared_vlans):
    # retrieve the current untagged and tagged VLANs for the interface
    current_vlans = get_vlans(ifname)
    # turn them into a set of tuples so they can be used in set operations
    current_vlans = set(map(lambda x: (x["flags"], x["vid"]), current_vlans))
    # get the interface index
    interface_idx = ndb.interfaces[ifname]["index"]

    # remove any unneeded configuration
    for flags, vlan_id in (current_vlans - declared_vlans):
        ipr.vlan_filter(
            "del",
            index=interface_idx,
            vlan_info={"flags": flags, "vid": vlan_id},
        )
        description = "untagged" if flags == 6 else "tagged"
        print(f"Removed {description} VLAN {vlan_id} from interface {interface['name']}")
    # and add the new one
    for flags, vlan_id in (declared_vlans - current_vlans):
        ipr.vlan_filter(
            "add",
            index=interface_idx,
            vlan_info={"flags": flags, "vid": vlan_id},
        )
        description = "untagged" if flags == 6 else "tagged"
        print(f"Added {description} VLAN {vlan_id} to interface {interface['name']}")

# configure the switchports
# NDB does not support VLAN filters at this time, so that step
# has to be performed via the IPRoute interface instead
ipr = IPRoute()

for interface in config["interfaces"]:
    # force skipping LACP members
    if interface["name"] in lacp_members:
        continue

    # check if the interface is a layer 2 port
    if "l3" not in interface:
        # it is, add it to the appropriate bridge if needed
        bridge_name = interface["virtual_switch"] if "virtual_switch" in interface else "default-switch"
        bridge_idx = ndb.interfaces[bridge_name]["index"]
        if ndb.interfaces[interface["name"]]["master"] != bridge_idx:
            (ndb
                .interfaces[bridge_name]
                .add_port(interface["name"])
                .commit()
            )
            print(f"Added interface {interface['name']} to bridge {bridge_name}")
        
        # process tagged and untagged VLANs. tagged has a flag of 0, untagged is 6
        # to this in a loop since all the other code is duplicated
        # if a voice VLAN is set, and it to the tagged list if it isn't in there yet
        tagged_vlans = interface["tagged_vlans"] if "tagged_vlans" in interface else []
        if "voice_vlan" in interface:
            if interface["voice_vlan"] not in tagged_vlans:
                tagged_vlans.append(interface["voice_vlan"])

        if "untagged_vlan" in interface:
            declared_vlans = set([(6, vlans[interface["untagged_vlan"]])])
        else:
            declared_vlans = set()
        declared_vlans.update(set([(0, vlans[x]) for x in tagged_vlans]))

        set_vlans(interface["name"], declared_vlans)
    else:
        # it's an L3 port
        # get the declared addresses and then set them
        declared_addresses = set(interface["l3"]["ipv4"] if "ipv4" in interface["l3"] else [])
        declared_addresses.update(interface["l3"]["ipv6"] if "ipv6" in interface["l3"] else [])
        set_addresses(interface["name"], declared_addresses)

    # configure the up/down state
    # default to down if not specified
    state = "up" if "enabled" in interface and interface["enabled"] else "down"
    if admin_state[interface["name"]] != state:
        (ndb
            .interfaces[interface["name"]]
            .set("state", state)
            .commit()
        )
        print(f"Set interface {interface['name']} state to {state}")


# go through the VLANs and check if any have L3 configurations
# if so, create the necessary VLAN interfaces
# first, get the list of L3 VLANs
l3_vlans = [vlan for vlan in config["vlans"] if "ipv4" in vlan or "ipv6" in vlan]
# keep track of the virtual switches, and the VLANs associated with them
bridges = {}
for vlan in l3_vlans:
    l3_name = f"vlan{vlan['id']}"
    bridge_name = vlan["virtual_switch"] if "virtual_switch" in vlan else "default-switch"
    # remember the VLAN against its bridge 
    if bridge_name in bridges:
        bridges[bridge_name].append(vlan["id"])
    else:
        bridges[bridge_name] = [vlan["id"]]

    # create the L3 interface if it does not exist    
    if l3_name not in ndb.interfaces:
        (ndb.interfaces
            .create(
                ifname=l3_name,
                link=bridge_name,
                kind="vlan",
                vlan_id=vlan["id"],
                state="up"
            )
            .commit()
        )
        print(f"Created layer 3 interface {l3_name} for VLAN {vlan['id']}")
    else:
        # it exists already, make sure it's up
        if admin_state[l3_name] != "up":
            (ndb.interfaces[l3_name]
                .set("state", "up")
                .commit()
            )
            print(f"Enabled layer 3 interface {l3_name} for VLAN {vlan['id']}")

    # and finally set the actual L3 addresses
    declared_addresses = set(vlan["ipv4"] if "ipv4" in vlan else [])
    declared_addresses.update(vlan["ipv6"] if "ipv6" in vlan else [])
    set_addresses(l3_name, declared_addresses)

# now go through the bridges and make sure the L3 VLANs are present as 'self'
# this is needed for the VLAN interface to be reachable
for bridge_name, declared in bridges.items():
    # turn the list of declared VLANs into a set of tuples
    declared = set([(0, vid) for vid in declared])
    # fetch the current VLANs on the bridge
    # turn them into a set of tuples so they can be used in set operations
    current = set(map(lambda x: (x["flags"], x["vid"]), get_vlans(bridge_name)))
    # look up the bridge interface ID
    interface_idx = ndb.interfaces[bridge_name]["index"]
    # remove the unneeded VLANs
    for flags, vlan_id in (current - declared):
        ipr.vlan_filter(
            "del",
            index=interface_idx,
            vlan_info={"flags": flags, "vid": vlan_id},
            vlan_flags="self",
        )
        print(f"Removed L3 VLAN {vlan_id} from bridge {bridge_name}")
    # and add the new one
    for flags, vlan_id in (declared - current):
        ipr.vlan_filter(
            "add",
            index=interface_idx,
            vlan_info={"flags": flags, "vid": vlan_id},
            vlan_flags="self",
        )
        print(f"Added L3 VLAN {vlan_id} to bridge {bridge_name}")

# handle interfaces that exist on the system but were not explicitly configured
# first, collect all names of existing interfaces
existing_interfaces = set(map(lambda x: x.ifname, ndb.interfaces.summary()))
# but ignore the system interfaces that shouldn't be touched
existing_interfaces -= set(do_not_touch)
# also subtract the virtual switches
existing_interfaces -= set(virtual_switches)
# subtract all physical interfaces that were explicitly configured
existing_interfaces -= set(map(lambda x: x["name"], config["interfaces"]))
# subtract all VLAN L3 interfaces that were explicitly configured
existing_interfaces -= set(map(lambda x: f"vlan{x['id']}", l3_vlans))
# subtract the declared LACP bundles
existing_interfaces -= declared_bundles

for interface in existing_interfaces:
    # set the interface state to admin down
    if admin_state[interface] != "down":
        (ndb
            .interfaces[interface]
            .set("state", "down")
            .commit()
        )
        print(f"Set unconfigured interface {interface} state to down")
    # remove L3 information by declaring no addresses, if needed
    if interface in interfaces_with_ips:
        set_addresses(interface, set())
    # remove VLANs by declaring none, if needed
    if interface in interfaces_with_vlans:
        set_vlans(interface, set())

ndb.close()
